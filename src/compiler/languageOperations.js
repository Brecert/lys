"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../parser/types");
const ast = require("@webassemblyjs/ast");
const f32Type = new types_1.f32();
const booleanType = new types_1.bool();
const i32Type = new types_1.i32();
exports.binaryOperations = [
    {
        lhsType: booleanType,
        rhsType: booleanType,
        outputType: booleanType,
        operator: 'and',
        generateCode: (lhs, rhs) => ast.instruction('i32.ne', [
            ast.instruction('i32.and', [lhs, rhs]),
            ast.objectInstruction('const', 'i32', [ast.numberLiteralFromRaw(0)])
        ])
    },
    {
        lhsType: booleanType,
        rhsType: booleanType,
        outputType: booleanType,
        operator: 'or',
        generateCode: (lhs, rhs) => ast.instruction('i32.ne', [
            ast.instruction('i32.or', [lhs, rhs]),
            ast.objectInstruction('const', 'i32', [ast.numberLiteralFromRaw(0)])
        ])
    },
    // INT
    {
        lhsType: i32Type,
        rhsType: i32Type,
        outputType: i32Type,
        operator: '+',
        generateCode: (lhs, rhs) => ast.instruction('i32.add', [lhs, rhs])
    },
    {
        lhsType: i32Type,
        rhsType: i32Type,
        outputType: i32Type,
        operator: '-',
        generateCode: (lhs, rhs) => ast.instruction('i32.sub', [lhs, rhs])
    },
    {
        lhsType: i32Type,
        rhsType: i32Type,
        outputType: i32Type,
        operator: '*',
        generateCode: (lhs, rhs) => ast.instruction('i32.mul', [lhs, rhs])
    },
    {
        lhsType: i32Type,
        rhsType: i32Type,
        outputType: i32Type,
        operator: '/',
        generateCode: (lhs, rhs) => ast.instruction('i32.div_s', [lhs, rhs])
    },
    {
        lhsType: i32Type,
        rhsType: i32Type,
        outputType: i32Type,
        operator: '^',
        generateCode: (lhs, rhs) => ast.instruction('i32.xor', [lhs, rhs])
    },
    {
        lhsType: i32Type,
        rhsType: i32Type,
        outputType: booleanType,
        operator: '==',
        generateCode: (lhs, rhs) => ast.instruction('i32.eq', [lhs, rhs])
    },
    {
        lhsType: i32Type,
        rhsType: i32Type,
        outputType: booleanType,
        operator: '>=',
        generateCode: (lhs, rhs) => ast.instruction('i32.ge_s', [lhs, rhs])
    },
    {
        lhsType: i32Type,
        rhsType: i32Type,
        outputType: booleanType,
        operator: '<=',
        generateCode: (lhs, rhs) => ast.instruction('i32.le_s', [lhs, rhs])
    },
    {
        lhsType: i32Type,
        rhsType: i32Type,
        outputType: booleanType,
        operator: '>',
        generateCode: (lhs, rhs) => ast.instruction('i32.gt_s', [lhs, rhs])
    },
    {
        lhsType: i32Type,
        rhsType: i32Type,
        outputType: booleanType,
        operator: '<',
        generateCode: (lhs, rhs) => ast.instruction('i32.lt_s', [lhs, rhs])
    },
    {
        lhsType: i32Type,
        rhsType: i32Type,
        outputType: booleanType,
        operator: '!=',
        generateCode: (lhs, rhs) => ast.instruction('i32.ne', [lhs, rhs])
    },
    // FLOAT
    {
        lhsType: f32Type,
        rhsType: f32Type,
        outputType: f32Type,
        operator: '+',
        generateCode: (lhs, rhs) => ast.instruction('f32.add', [lhs, rhs])
    },
    {
        lhsType: f32Type,
        rhsType: f32Type,
        outputType: f32Type,
        operator: '-',
        generateCode: (lhs, rhs) => ast.instruction('f32.sub', [lhs, rhs])
    },
    {
        lhsType: f32Type,
        rhsType: f32Type,
        outputType: f32Type,
        operator: '*',
        generateCode: (lhs, rhs) => ast.instruction('f32.mul', [lhs, rhs])
    },
    {
        lhsType: f32Type,
        rhsType: f32Type,
        outputType: f32Type,
        operator: '/',
        generateCode: (lhs, rhs) => ast.instruction('f32.div', [lhs, rhs])
    }
];
function findBuiltInTypedBinaryOperation(operator, lhsType, rhsType) {
    const subset = exports.binaryOperations.filter($ => $.operator == operator);
    const ret = subset.find($ => lhsType.equals($.lhsType) && rhsType.equals($.rhsType));
    if (!ret)
        throw new Error(`Cannot resolve type of ${lhsType} (${operator}) ${rhsType}`);
    return ret;
}
exports.findBuiltInTypedBinaryOperation = findBuiltInTypedBinaryOperation;
//# sourceMappingURL=data:application/json;base64,