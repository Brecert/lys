"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const NodeError_1 = require("./NodeError");
var NativeTypes;
(function (NativeTypes) {
    NativeTypes["i32"] = "i32";
    NativeTypes["i64"] = "i64";
    NativeTypes["f32"] = "f32";
    NativeTypes["f64"] = "f64";
    NativeTypes["anyfunc"] = "anyfunc";
    NativeTypes["func"] = "func";
    NativeTypes["block_type"] = "block_type";
    NativeTypes["void"] = "void";
    NativeTypes["boolean"] = "boolean";
    NativeTypes["i8"] = "i8";
    NativeTypes["u8"] = "u8";
    NativeTypes["i16"] = "i16";
    NativeTypes["u16"] = "u16";
    NativeTypes["u32"] = "u32";
    NativeTypes["u64"] = "u64";
})(NativeTypes = exports.NativeTypes || (exports.NativeTypes = {}));
// In _bytes_
const word = 4;
var sizeOf;
(function (sizeOf) {
    sizeOf[sizeOf["i32"] = word] = "i32";
    sizeOf[sizeOf["i64"] = word * 2] = "i64";
    sizeOf[sizeOf["f32"] = word] = "f32";
    sizeOf[sizeOf["f64"] = word * 2] = "f64";
    sizeOf[sizeOf["u64"] = word * 2] = "u64";
    sizeOf[sizeOf["u32"] = word] = "u32";
    sizeOf[sizeOf["u16"] = word >> 1] = "u16";
    sizeOf[sizeOf["boolean"] = word >> 2] = "boolean";
    sizeOf[sizeOf["u8"] = word >> 2] = "u8";
    sizeOf[sizeOf["i8"] = word >> 2] = "i8";
    sizeOf[sizeOf["i16"] = word >> 1] = "i16";
    sizeOf[sizeOf["anyfunc"] = word] = "anyfunc";
    sizeOf[sizeOf["func"] = word] = "func";
    sizeOf[sizeOf["block_type"] = word] = "block_type";
})(sizeOf = exports.sizeOf || (exports.sizeOf = {}));
class Type {
    getSize() {
        return sizeOf[this.nativeType];
    }
    get binaryenType() {
        switch (this.nativeType) {
            case NativeTypes.i32:
                return 'i32';
            case NativeTypes.u32:
                return 'i32';
            case NativeTypes.f32:
                return 'f32';
            case NativeTypes.f64:
                return 'f64';
            case NativeTypes.boolean:
            case NativeTypes.u8:
            case NativeTypes.i8:
            case NativeTypes.u16:
            case NativeTypes.i16:
            case NativeTypes.func:
                return 'i32';
            case NativeTypes.void:
                return undefined;
        }
    }
    equals(_otherType) {
        if (!_otherType)
            return false;
        return _otherType && this.nativeType == _otherType.nativeType && this.binaryenType == _otherType.binaryenType;
    }
    canBeAssignedTo(_otherType) {
        return this.equals(_otherType);
    }
    toString() {
        return `???<${NativeTypes[this.nativeType]}>`;
    }
}
exports.Type = Type;
class VoidType extends Type {
    constructor() {
        super();
        this.nativeType = NativeTypes.void;
    }
    toString() {
        return 'void';
    }
}
VoidType.instance = new VoidType();
exports.VoidType = VoidType;
class InvalidType extends VoidType {
    toString() {
        return 'INVALID_TYPE';
    }
}
InvalidType.instance = new InvalidType();
exports.InvalidType = InvalidType;
class FunctionType extends Type {
    constructor(internalName) {
        super();
        this.internalName = internalName;
        this.nativeType = NativeTypes.func;
    }
    acceptsTypes(types) {
        if (this.parameterTypes.length !== types.length)
            return false;
        return types.every(($, $$) => this.parameterTypes[$$].equals($));
    }
    equals(type) {
        if (!(type instanceof FunctionType))
            return false;
        if (this.parameterTypes.length != type.parameterTypes.length)
            return false;
        if (!this.returnType.equals(type.returnType))
            return false;
        if (this.parameterTypes.some(($, $$) => !$.equals(type.parameterTypes[$$])))
            return false;
        return true;
    }
    toString() {
        return `fun(${this.parameterTypes
            .map(($, $$) => {
            if (this.parameterNames[$$]) {
                return this.parameterNames[$$] + ': ' + $;
            }
            else {
                return $;
            }
        })
            .join(', ')}) -> ${this.returnType}`;
    }
}
exports.FunctionType = FunctionType;
class IntersectionType extends Type {
    constructor(of = []) {
        super();
        this.of = of;
        this.nativeType = NativeTypes.anyfunc;
    }
    toString() {
        return this.of.map($ => $.toString()).join(' & ');
    }
    simplify() {
        const newTypes = [];
        this.of.forEach($ => {
            if (!newTypes.some($1 => $1.equals($))) {
                newTypes.push($);
            }
        });
        if (newTypes.length === 1) {
            return newTypes[0];
        }
        else {
            const newType = new IntersectionType();
            newType.of = newTypes;
            return newType;
        }
    }
}
exports.IntersectionType = IntersectionType;
class TypeReference extends Type {
    constructor(referencedName, closure) {
        super();
        this.referencedName = referencedName;
        this.closure = closure;
    }
    resolveType(typeGraph) {
        const resolvedReference = this.closure.get(this.referencedName);
        const typeNode = typeGraph.findNode(resolvedReference.referencedNode);
        // TODO: verify referencedNode is a type declaration and not a variable name
        if (!typeNode) {
            throw new NodeError_1.AstNodeError('Node has no type node', resolvedReference.referencedNode);
        }
        if (!typeNode.resultType()) {
            throw new NodeError_1.AstNodeError(`Node ${resolvedReference.referencedNode.nodeName} has no resolved type`, resolvedReference.referencedNode);
        }
        return typeNode.resultType();
    }
    toString() {
        return `TypeRef(${this.referencedName})`;
    }
}
exports.TypeReference = TypeReference;
class UnionType extends Type {
    constructor(of = []) {
        super();
        this.of = of;
        this.nativeType = NativeTypes.anyfunc;
    }
    toString() {
        return this.of.map($ => $.toString()).join(' | ');
    }
    simplify() {
        const newTypes = [];
        this.of.forEach($ => {
            if (!newTypes.some($1 => $1.equals($))) {
                newTypes.push($);
            }
        });
        if (newTypes.length === 1) {
            return newTypes[0];
        }
        else {
            const newType = new UnionType();
            newType.of = newTypes;
            return newType;
        }
    }
}
exports.UnionType = UnionType;
class NativeType extends Type {
    constructor(nativeType) {
        super();
        this.nativeType = nativeType;
    }
    toString() {
        return NativeTypes[this.nativeType];
    }
}
exports.NativeType = NativeType;
class u8 extends NativeType {
    constructor() {
        super(NativeTypes.u8);
    }
}
exports.u8 = u8;
class bool extends NativeType {
    constructor() {
        super(NativeTypes.i32);
    }
    equals(_otherType) {
        if (!_otherType)
            return false;
        return _otherType && _otherType instanceof bool;
    }
    toString() {
        return NativeTypes.boolean;
    }
}
bool.instance = new bool();
exports.bool = bool;
class i32 extends NativeType {
    constructor() {
        super(NativeTypes.i32);
    }
}
exports.i32 = i32;
class u32 extends NativeType {
    constructor() {
        super(NativeTypes.u32);
    }
}
exports.u32 = u32;
class i16 extends NativeType {
    constructor() {
        super(NativeTypes.i16);
    }
}
exports.i16 = i16;
class u16 extends NativeType {
    constructor() {
        super(NativeTypes.u16);
    }
}
exports.u16 = u16;
class f32 extends NativeType {
    constructor() {
        super(NativeTypes.f32);
    }
}
exports.f32 = f32;
class f64 extends NativeType {
    constructor() {
        super(NativeTypes.f64);
    }
}
exports.f64 = f64;
class pointer extends NativeType {
    constructor() {
        super(NativeTypes.anyfunc);
    }
}
exports.pointer = pointer;
exports.InjectableTypes = {
    u8,
    boolean: bool,
    i32,
    u32,
    i16,
    u16,
    f32,
    f64,
    pointer,
    void: VoidType
};
function toConcreteType(type, ctx) {
    if (type instanceof TypeReference) {
        return type.resolveType(ctx.currentGraph);
    }
    return type;
}
exports.toConcreteType = toConcreteType;
//# sourceMappingURL=data:application/json;base64,