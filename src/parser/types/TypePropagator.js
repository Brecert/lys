"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../types");
const TypeGraphBuilder_1 = require("./TypeGraphBuilder");
function top(stack) {
    if (stack.length) {
        return stack[stack.length - 1];
    }
    return null;
}
class TypeResolutionContext {
    constructor(rootGraph, parsingContext) {
        this.rootGraph = rootGraph;
        this.parsingContext = parsingContext;
        this._executors = new Array();
        this._functionSubGraphs = new Array();
    }
    newExecutorWithContext(scope, dataGraph, parsingContext) {
        const propagator = new TypePropagator(this);
        this._executors.push({ dataGraph, propagator, scope, parsingContext });
        return propagator;
    }
    endContext() {
        this._executors.pop();
    }
    /**
     * Returns the current executor that is being used for execution of the graph
     *
     * @return
     */
    get currentExecutor() {
        return top(this._executors).propagator;
    }
    /**
     * Returns the graph that is being currently under execution
     *
     * @return
     */
    get currentGraph() {
        return top(this._executors).dataGraph;
    }
    /**
     * Return the
     *
     * @return
     */
    get currentScopeNavigator() {
        return top(this._executors).scope;
    }
    get currentParsingContext() {
        return top(this._executors).parsingContext;
    }
    getFunctionSubGraph(functionNode, parameterTypes) {
        const x = this.getFunctionGraph(functionNode);
        if (x) {
            const ret = x.find(graph => this.matches(graph.seq, parameterTypes));
            if (!ret)
                return null;
            return ret.graph;
        }
        return null;
    }
    getFunctionGraph(functionNode) {
        const ret = this._functionSubGraphs.find($ => $.functionNode == functionNode);
        if (!ret)
            return null;
        return ret.list;
    }
    matches(expected, actual) {
        if (expected.length == actual.length) {
            return !expected.some((type, $$) => !type.equals(actual[$$]));
        }
        else {
            return false;
        }
    }
    removeFunctionSubGraph(functionNode, parameterTypes, _graph) {
        const x = this.getFunctionGraph(functionNode);
        if (x) {
            const theFn = x.findIndex(graph => graph.graph === _graph || this.matches(graph.seq, parameterTypes));
            x.splice(theFn, 1);
        }
    }
    addFunctionSubGraph(functionNode, parameterTypes, graph) {
        const x = this.getFunctionGraph(functionNode);
        if (x) {
            x.push({ seq: parameterTypes, graph });
        }
        else {
            this._functionSubGraphs.push({
                functionNode,
                list: [{ seq: parameterTypes, graph }]
            });
        }
    }
}
exports.TypeResolutionContext = TypeResolutionContext;
class TypePropagator {
    constructor(ctx) {
        this.ctx = ctx;
        this.executionStack = [];
    }
    scheduleNode(node) {
        if (!this.executionStack.some(n => n == node)) {
            this.executionStack.push(node);
        }
    }
    start() {
        while (this.executionStack.length !== 0) {
            const nodeToExecute = this.executionStack.pop();
            nodeToExecute.execute(this.ctx);
        }
    }
    scheduleNodes() {
        this.ctx.currentGraph.nodes.forEach(node => {
            if (!node.allDependenciesResolved()) {
                const incomingEdges = node.incomingEdges();
                if (incomingEdges.some($ => $.crossGraphEdge())) {
                    const crossGraph = incomingEdges.filter(edge => edge.crossGraphEdge());
                    crossGraph.forEach($ => this.scheduleDependencies($, []));
                }
            }
        });
        this.ctx.currentGraph.nodes.forEach(node => {
            if (node.allDependenciesResolved()) {
                this.scheduleNode(node);
            }
        });
    }
    scheduleDependencies(edge, stack) {
        if (!edge.incomingTypeDefined()) {
            if (edge.source.resultType()) {
                edge.propagateType(edge.source.resultType(), this.ctx);
            }
            else if (edge.source.incomingEdges().length == 0) {
                this.scheduleNode(edge.source);
            }
            else {
                if (!stack.includes(edge.source)) {
                    stack.push(edge.source);
                    edge.source.incomingEdges().forEach(incomingEdge => {
                        //Avoid self reference loop
                        if (incomingEdge.source != edge.target) {
                            this.scheduleDependencies(incomingEdge, stack);
                        }
                    });
                    stack.pop();
                }
            }
        }
        else {
            this.ctx.currentExecutor.scheduleNode(edge.target);
        }
    }
    run() {
        this.scheduleNodes();
        this.start();
        this.ctx.endContext();
    }
}
exports.TypePropagator = TypePropagator;
function resolveReturnType(typeGraph, functionNode, argTypes, ctx) {
    const subGraph = ctx.getFunctionSubGraph(functionNode, argTypes);
    if (subGraph) {
        const result = subGraph.findNode(functionNode).resultType();
        if (result instanceof types_1.FunctionType) {
            // THIS SHOULD NOT HAPPEN
            return result.returnType;
        }
        return result;
    }
    else {
        const context = ctx.currentParsingContext;
        const dataGraphBuilder = new TypeGraphBuilder_1.TypeGraphBuilder(ctx.parsingContext, typeGraph);
        const dataGraph = dataGraphBuilder.buildFunctionNode(functionNode, argTypes);
        ctx.addFunctionSubGraph(functionNode, argTypes, dataGraph);
        const functionName = functionNode.functionName.name + '(' + argTypes.join(',') + ')';
        ctx.rootGraph.addSubGraph(dataGraph, functionName);
        ctx.newExecutorWithContext(functionNode.closure, dataGraph, context).run();
        const value = dataGraph.findNode(functionNode);
        const result = value.resultType();
        if (!result || ctx.parsingContext.hasErrors()) {
            ctx.removeFunctionSubGraph(functionNode, argTypes, dataGraph);
            ctx.rootGraph.removeSubGraph(dataGraph, functionName);
        }
        if (result instanceof types_1.FunctionType) {
            // THIS SHOULD NOT HAPPEN
            return result.returnType;
        }
        return result;
    }
}
exports.resolveReturnType = resolveReturnType;
//# sourceMappingURL=data:application/json;base64,