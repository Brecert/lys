"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nodes_1 = require("../nodes");
const types_1 = require("../types");
const NodeError_1 = require("../NodeError");
function exists(set, delegate) {
    if (set.length == 0)
        return false;
    for (let entry of set) {
        if (delegate(entry))
            return true;
    }
    return false;
}
class TypeResolver {
    supportsPartialResolution() {
        return false;
    }
}
exports.TypeResolver = TypeResolver;
class LiteralTypeResolver extends TypeResolver {
    constructor(type) {
        super();
        this.type = type;
    }
    execute(_0, _1) {
        return this.type;
    }
}
exports.LiteralTypeResolver = LiteralTypeResolver;
class TypeGraph {
    constructor(nodes, parentGraph = null) {
        this.nodes = nodes;
        this.parentGraph = parentGraph;
        this._subGraph = new Map();
        //Set Parent to the children
        nodes.forEach($ => ($.parentGraph = this));
    }
    get rootGraph() {
        return this.parentGraph;
    }
    addSubGraph(subGraph, name) {
        this._subGraph.set(subGraph, name);
    }
    removeSubGraph(subGraph, name) {
        this._subGraph.forEach(($, $$) => {
            if ($ == name && $$ == subGraph) {
                this._subGraph.delete($$);
            }
        });
    }
    get subGraphs() {
        return this._subGraph;
    }
    findNode(astNode) {
        return (this.nodes.find(node => node.astNode == astNode) ||
            (this.parentGraph && this.parentGraph.findNode(astNode)) ||
            null);
    }
    findNodeInSubGraphs(astNode) {
        let ret = this.findNode(astNode);
        if (!ret) {
            const sg = this.subGraphs.entries();
            for (let x of sg) {
                const foundNode = x[0].findNodeInSubGraphs(astNode);
                if (foundNode) {
                    ret = foundNode;
                    break;
                }
            }
            return ret;
        }
        return ret;
    }
}
exports.TypeGraph = TypeGraph;
class TypeNode {
    constructor(astNode, typeResolver) {
        this.astNode = astNode;
        this.typeResolver = typeResolver;
        this.MAX_ATTEMPTS = 5;
        this._outgoingEdges = [];
        this._incomingEdges = [];
        this.amount = 0;
        this.parentGraph = null;
        if (!astNode) {
            throw new Error('empty astNode');
        }
    }
    execute(ctx) {
        if (this.typeResolver.supportsPartialResolution() || this.allDependenciesResolved()) {
            if (this.amount < this.MAX_ATTEMPTS) {
                this.amount = this.amount + 1;
                let resultType = this.typeResolver.execute(this, ctx);
                if (resultType) {
                    if (!this.resultType() || !resultType.equals(this.astNode.ofType)) {
                        // We only add one if the type is new
                        const newType = this.astNode instanceof nodes_1.Nodes.VariableReferenceNode ? types_1.toConcreteType(resultType, ctx) : resultType;
                        this.astNode.ofType = newType;
                        this._outgoingEdges.forEach(edge => {
                            edge.propagateType(newType, ctx);
                        });
                    }
                }
            }
            else {
                ctx.parsingContext.warning(`Unable to infer type as recursion didn't stabilize after ${this.MAX_ATTEMPTS} attempts.`, this.astNode);
            }
        }
    }
    removeOutputEdge(edge) {
        this._outgoingEdges = this._outgoingEdges.filter($ => $ != edge);
    }
    removeIncomingEdge(edge) {
        this._incomingEdges = this._incomingEdges.filter($ => $ != edge);
    }
    allDependenciesResolved() {
        return (this.incomingEdges().length == 0 ||
            this.typeResolver instanceof LiteralTypeResolver ||
            !exists(this.incomingEdges(), $ => !$.incomingTypeDefined()));
    }
    resultType() {
        return this.astNode.ofType || null;
    }
    addOutgoingEdge(edge) {
        this._outgoingEdges.push(edge);
    }
    addIncomingEdge(edge) {
        this._incomingEdges.push(edge);
    }
    outgoingEdges() {
        return this._outgoingEdges;
    }
    incomingEdges() {
        return this._incomingEdges;
    }
    incomingEdgesByName(label) {
        return this._incomingEdges.filter(edge => edge.label == label);
    }
}
exports.TypeNode = TypeNode;
class Edge {
    constructor(source, target, label = '', expected = null) {
        this.source = source;
        this.target = target;
        this.label = label;
        this.expected = expected;
        this._incomingType = null;
        this._error = false;
        source.addOutgoingEdge(this);
        target.addIncomingEdge(this);
    }
    /**
     * If this node has an error or not
     * @return
     */
    error() {
        return this._error;
    }
    /**
     * If this edge is cross different graphs
     *
     * @return
     */
    crossGraphEdge() {
        return this.source.parentGraph != this.target.parentGraph;
    }
    remove() {
        this.source.removeOutputEdge(this);
        this.target.removeIncomingEdge(this);
    }
    propagateType(actualType, ctx) {
        actualType = types_1.toConcreteType(actualType, ctx);
        if (this.expected) {
            const expectedType = types_1.toConcreteType(this.expected, ctx);
            if (!actualType.canBeAssignedTo(expectedType)) {
                this._error = true;
                this._incomingType = actualType;
                ctx.parsingContext.error(new NodeError_1.TypeMismatch(actualType, expectedType, this.source.astNode));
            }
            else {
                this._incomingType = actualType;
                ctx.currentExecutor.scheduleNode(this.target);
            }
        }
        else {
            this._incomingType = actualType;
            ctx.currentExecutor.scheduleNode(this.target);
        }
    }
    mayBeIncomingType() {
        return this._incomingType;
    }
    incomingType() {
        if (!this._incomingType)
            throw new Error('Type not defined');
        return this._incomingType;
    }
    incomingTypeDefined() {
        return !!this._incomingType;
    }
}
exports.Edge = Edge;
//# sourceMappingURL=data:application/json;base64,