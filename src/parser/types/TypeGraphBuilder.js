"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TypeGraph_1 = require("./TypeGraph");
const nodes_1 = require("../nodes");
const typeResolvers_1 = require("./typeResolvers");
const types_1 = require("../types");
function fromTypeNode(node) {
    if (node instanceof nodes_1.Nodes.TypeReferenceNode) {
        return new types_1.TypeReference(node.name.name, node.closure);
    }
    return null;
}
exports.fromTypeNode = fromTypeNode;
class TypeGraphBuilder {
    constructor(parsingContext, parentGraph = null, expectedOutput = null) {
        this.parsingContext = parsingContext;
        this.parentGraph = parentGraph;
        this.expectedOutput = expectedOutput;
        this._nodes = [];
        this._referenceNode = [];
        //
    }
    createReferenceNode(node) {
        const resolver = typeResolvers_1.getTypeResolver(node);
        const result = this.createNode(node, resolver);
        return result;
    }
    createNode(node, resolver) {
        if (this._nodes.some($ => $.astNode == node)) {
            throw new Error(`The node ${node.nodeName} already exist in _nodes`);
        }
        if (!resolver) {
            throw new Error(`The node ${node.nodeName} has no resolver`);
        }
        const result = new TypeGraph_1.TypeNode(node, resolver);
        this._nodes.push(result);
        return result;
    }
    build(node) {
        node.directives.forEach(node => {
            if (node instanceof nodes_1.Nodes.VarDirectiveNode) {
                this.processVarDecl(node.decl);
            }
            else if (node instanceof nodes_1.Nodes.OverloadedFunctionNode) {
                this.traverse(node);
            }
            else if (node instanceof nodes_1.Nodes.FunDirectiveNode) {
                throw new Error('Unreachable');
            }
            else if (node instanceof nodes_1.Nodes.TypeDirectiveNode) {
                this.processTypeDirective(node);
            }
        });
        return this.createTypeGraph();
    }
    buildFunctionNode(functionNode, args) {
        const paramList = functionNode.parameters;
        if (args.length != paramList.length) {
            paramList.forEach((param, index) => {
                if (index >= args.length) {
                    if (param.defaultValue) {
                        const paramNode = this.traverse(param.parameterName);
                        new TypeGraph_1.Edge(this.traverse(param.defaultValue), paramNode);
                    }
                    else {
                        this.createReferenceNode(param.parameterName);
                    }
                }
                else {
                    this.createNode(param.parameterName, new TypeGraph_1.LiteralTypeResolver(args[index]));
                }
            });
        }
        else {
            paramList.forEach((param, index) => {
                this.createNode(param.parameterName, new TypeGraph_1.LiteralTypeResolver(args[index]));
            });
        }
        const bodyNode = this.traverse(functionNode.body);
        const result = this.createNode(functionNode, new typeResolvers_1.PassThroughTypeResolver());
        new TypeGraph_1.Edge(bodyNode, result, void 0, this.expectedOutput);
        return this.createTypeGraph();
    }
    createTypeGraph() {
        this._referenceNode.forEach(({ result, reference }) => {
            const referencedType = this.resolveReferenceNode(reference);
            if (referencedType) {
                new TypeGraph_1.Edge(referencedType, result);
            }
            else {
                throw new Error('Unable to resolve reference to ' +
                    reference.referencedNode.name +
                    ' from ' +
                    (reference.moduleSource || 'local module'));
            }
        });
        return new TypeGraph_1.TypeGraph(this._nodes, this.parentGraph);
    }
    resolveReferenceNode(referenceNode) {
        //If no parent is a local reference else is a reference to another module.
        if (referenceNode.isLocalReference) {
            return this.findNode(referenceNode.referencedNode);
        }
        return null;
        // else {
        //   const parent: Nodes.NameIdentifierNode = referenceNode.moduleSource
        //   const module: PhaseResult[TypeCheckingResult[ModuleNode]] = parsingContext.getTypeCheckingForModule(parent.get)
        //   module.getResult().typeGraph.findNode(referenceNode.referencedNode)
        // }
    }
    resolveVariable(node, result) {
        const reference = node.closure.get(node.name);
        if (reference) {
            this._referenceNode.push({ reference, result });
        }
        else {
            this.parsingContext.error(`Invalid reference ${node.name}` /* InvalidReferenceMessage */, node);
        }
    }
    traverse(node) {
        return this.traverseNode(node, this.createReferenceNode(node));
    }
    traverseNode(node, target) {
        if (node instanceof nodes_1.Nodes.FunctionNode) {
            node.parameters.forEach(arg => {
                const defaultValue = arg.defaultValue;
                if (arg.parameterType) {
                    const expectedType = fromTypeNode(arg.parameterType);
                    const argumentNode = this.createNode(arg.parameterName, new TypeGraph_1.LiteralTypeResolver(expectedType));
                    new TypeGraph_1.Edge(argumentNode, target, arg.parameterName.name);
                    if (defaultValue) {
                        new TypeGraph_1.Edge(this.traverse(defaultValue), argumentNode, void 0, expectedType);
                    }
                }
                else {
                    this.parsingContext.error(`Parameter ${arg.parameterName.name} has no defined type`, node);
                }
            });
        }
        else if (node instanceof nodes_1.Nodes.OverloadedFunctionNode) {
            node.functions.forEach(fun => new TypeGraph_1.Edge(this.traverse(fun), target));
            new TypeGraph_1.Edge(target, this.traverse(node.functionName));
        }
        else if (node instanceof nodes_1.Nodes.VariableReferenceNode) {
            this.resolveVariable(node.variable, target);
        }
        else if (node instanceof nodes_1.Nodes.AssignmentNode) {
            // this.resolveVariable(node.variable.variable, target);
            new TypeGraph_1.Edge(this.traverse(node.variable), target, typeResolvers_1.EdgeLabels.LHS);
            new TypeGraph_1.Edge(this.traverse(node.value), target, typeResolvers_1.EdgeLabels.RHS);
        }
        else if (node instanceof nodes_1.Nodes.TypeReferenceNode) {
            this.resolveVariable(node.name, target);
        }
        else if (node instanceof nodes_1.Nodes.IfNode) {
            new TypeGraph_1.Edge(this.traverse(node.truePart), target, typeResolvers_1.EdgeLabels.TRUE_PART);
            new TypeGraph_1.Edge(this.traverse(node.condition), target, typeResolvers_1.EdgeLabels.CONDITION, new types_1.bool());
            if (node.falsePart) {
                new TypeGraph_1.Edge(this.traverse(node.falsePart), target, typeResolvers_1.EdgeLabels.FALSE_PART);
            }
        }
        else if (node instanceof nodes_1.Nodes.BinaryExpressionNode) {
            new TypeGraph_1.Edge(this.traverse(node.lhs), target, typeResolvers_1.EdgeLabels.LHS);
            new TypeGraph_1.Edge(this.traverse(node.rhs), target, typeResolvers_1.EdgeLabels.RHS);
        }
        else if (node instanceof nodes_1.Nodes.BlockNode) {
            node.statements.forEach($ => {
                new TypeGraph_1.Edge(this.traverse($), target, typeResolvers_1.EdgeLabels.STATEMENTS);
            });
        }
        else if (node instanceof nodes_1.Nodes.FunctionCallNode) {
            new TypeGraph_1.Edge(this.traverse(node.functionNode), target);
            node.argumentsNode.forEach(child => {
                new TypeGraph_1.Edge(this.traverse(child), target, typeResolvers_1.EdgeLabels.PARAMETER);
            });
        }
        else if (node instanceof nodes_1.Nodes.PatternMatcherNode) {
            const matched = this.traverse(node.lhs);
            new TypeGraph_1.Edge(matched, target, typeResolvers_1.EdgeLabels.PATTERN_EXPRESSION);
            node.matchingSet.forEach(child => {
                const source = this.traverse(child);
                new TypeGraph_1.Edge(source, target, typeResolvers_1.EdgeLabels.MATCH_EXPRESSION);
                new TypeGraph_1.Edge(matched, source, typeResolvers_1.EdgeLabels.PATTERN_MATCHING_VALUE);
            });
        }
        else if (node instanceof nodes_1.Nodes.VarDeclarationNode) {
            this.processVarDecl(node);
        }
        else if (node instanceof nodes_1.Nodes.MatchLiteralNode) {
            new TypeGraph_1.Edge(this.traverse(node.literal), target, typeResolvers_1.EdgeLabels.LHS);
            new TypeGraph_1.Edge(this.traverse(node.rhs), target, typeResolvers_1.EdgeLabels.RHS);
        }
        else if (node instanceof nodes_1.Nodes.MatchDefaultNode) {
            new TypeGraph_1.Edge(this.traverse(node.rhs), target, typeResolvers_1.EdgeLabels.RHS);
        }
        else
            this.traverseChildren(node, target);
        return target;
    }
    processVarDecl(decl) {
        const requiredType = (decl.variableType && fromTypeNode(decl.variableType)) || null;
        const variableNode = requiredType
            ? this.traverseNode(decl.variableName, this.createNode(decl.variableName, new TypeGraph_1.LiteralTypeResolver(requiredType)))
            : this.traverse(decl.variableName);
        const valueNode = this.traverse(decl.value);
        return new TypeGraph_1.Edge(valueNode, variableNode, void 0, requiredType);
    }
    processTypeDirective(directive) {
        if (directive.valueType) {
            if (directive.variableName.name in types_1.InjectableTypes) {
                this.parsingContext.error('You cannot redefine a built-in type', directive.valueType);
            }
            new TypeGraph_1.Edge(this.createReferenceNode(directive.valueType), this.traverse(directive.variableName));
        }
        else {
            if (directive.variableName.name in types_1.InjectableTypes) {
                const type = new types_1.InjectableTypes[directive.variableName.name]();
                directive.variableName.ofType = type;
                this.createNode(directive.variableName, new TypeGraph_1.LiteralTypeResolver(type));
            }
            else {
                this.parsingContext.error(`Cannot find built in type "${directive.variableName.name}"`, directive.variableName);
                this.createNode(directive.variableName, new TypeGraph_1.LiteralTypeResolver(types_1.VoidType.instance));
            }
        }
    }
    findNode(referenceNode) {
        const localNode = this.findLocalNode(referenceNode);
        return localNode || (this.parentGraph && this.parentGraph.findNode(referenceNode));
    }
    findLocalNode(referenceNode) {
        return this._nodes.find(node => node.astNode == referenceNode);
    }
    traverseChildren(node, result) {
        const children = node.children;
        return children.map(child => new TypeGraph_1.Edge(this.traverse(child), result));
    }
}
exports.TypeGraphBuilder = TypeGraphBuilder;
//# sourceMappingURL=data:application/json;base64,