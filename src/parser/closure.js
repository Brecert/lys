"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nodes_1 = require("./nodes");
const NodeError_1 = require("./NodeError");
class ParsingContext {
    constructor() {
        this.programTakenNames = new Set();
        this.errors = [];
    }
    error(error, node) {
        if (error instanceof NodeError_1.AstNodeError) {
            if (!this.errors.some($ => $.message == error.message && $.node == error.node)) {
                this.errors.push(error);
            }
        }
        else {
            if (!this.errors.some($ => $.message == error && $.node == node)) {
                this.errors.push(new NodeError_1.AstNodeError(error, node));
            }
        }
    }
    warning(message, node) {
        if (!this.errors.some($ => $.message == message && $.node == node)) {
            this.errors.push(new NodeError_1.AstNodeError(message, node, true));
        }
    }
    hasErrors() {
        return this.errors.some($ => !$.warning);
    }
}
exports.ParsingContext = ParsingContext;
class Closure {
    constructor(parsingContext, parent = null) {
        this.parsingContext = parsingContext;
        this.parent = parent;
        this.localsMap = new Map();
        this.localScopeDeclares = new Set();
        this.nameMappings = {};
        this.localUsages = {};
        if (parent) {
            Object.assign(this.nameMappings, parent.nameMappings);
        }
    }
    getInternalIdentifier(node) {
        let prefix = 'identifier_';
        if (node instanceof nodes_1.Nodes.FunctionNode) {
            prefix = node.functionName.name || 'anonFun';
        }
        let i = 0;
        while (true) {
            const newName = i ? `${prefix}${i}` : prefix;
            if (!this.parsingContext.programTakenNames.has(newName)) {
                this.parsingContext.programTakenNames.add(newName);
                return newName;
            }
            i++;
        }
    }
    incrementUsage(name) {
        const x = this.get(name);
        this.localUsages[name] = (this.localUsages[name] || 0) + 1;
        x.usages++;
    }
    set(nameNode, valueNode) {
        const localName = nameNode.name;
        if (localName in this.localUsages && this.localUsages[localName] > 0) {
            throw new Error(`Cannot reasign ${localName} because it was used`);
        }
        if (this.localScopeDeclares.has(localName)) {
            throw new Error(`"${localName}" is already declared`);
        }
        this.nameMappings[localName] = new Reference(nameNode, this, null, valueNode);
        this.localScopeDeclares.add(localName);
        return this.nameMappings[localName];
    }
    canResolveName(localName) {
        return localName in this.nameMappings;
    }
    get(localName) {
        if (localName in this.nameMappings) {
            return this.nameMappings[localName];
        }
        throw new Error('Cannot resolve name "' + localName + '"');
    }
    inspect() {
        return ('Closure [' +
            '\n  ' +
            Object.keys(this.nameMappings).join('\n  ') +
            '\n  parent = ' +
            (this.parent ? '\n' + this.parent.inspect().replace(/^(.*)/gm, '    $1') : 'null') +
            '\n]');
    }
    newChildClosure() {
        return new Closure(this.parsingContext, this);
    }
}
exports.Closure = Closure;
class Reference {
    constructor(referencedNode, scope, moduleSource = null, valueNode) {
        this.referencedNode = referencedNode;
        this.scope = scope;
        this.moduleSource = moduleSource;
        this.valueNode = valueNode;
        this.usages = 0;
    }
    get isLocalReference() {
        return !this.moduleSource;
    }
}
exports.Reference = Reference;
//# sourceMappingURL=data:application/json;base64,