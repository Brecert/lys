(module
 (type $0 (func (param i32 i32) (result i32)))
 (type $3 (func (param f32 f32) (result f32)))
 (type $4 (func (result i32)))
 (type $5 (func (param i32) (result i32)))
 (type $6 (func (param f32 f64) (result f32)))
 (export "test" (func $55))
 (export "test0" (func $55))
 (export "testa" (func $57))
 (export "floatingPoints" (func $58))
 (export "addFloat" (func $59))
 (export "addInts" (func $60))
 (export "x" (func $61))
 (func $11 (; 0 ;) (; has Stack IR ;) (type $3) (param $0 f32) (param $1 f32) (result f32)
  (f32.add
   (get_local $0)
   (get_local $1)
  )
 )
 (func $55 (; 1 ;) (; has Stack IR ;) (type $4) (result i32)
  (i32.const 1)
 )
 (func $57 (; 2 ;) (; has Stack IR ;) (type $5) (param $0 i32) (result i32)
  (get_local $0)
 )
 (func $58 (; 3 ;) (; has Stack IR ;) (type $6) (param $0 f32) (param $1 f64) (result f32)
  (get_local $0)
 )
 (func $59 (; 4 ;) (; has Stack IR ;) (type $3) (param $0 f32) (param $1 f32) (result f32)
  (call $11
   (get_local $0)
   (get_local $1)
  )
 )
 (func $60 (; 5 ;) (; has Stack IR ;) (type $0) (param $0 i32) (param $1 i32) (result i32)
  (i32.add
   (get_local $0)
   (get_local $1)
  )
 )
 (func $61 (; 6 ;) (; has Stack IR ;) (type $3) (param $0 f32) (param $1 f32) (result f32)
  (f32.mul
   (call $11
    (get_local $0)
    (f32.const 1)
   )
   (get_local $1)
  )
 )
)
